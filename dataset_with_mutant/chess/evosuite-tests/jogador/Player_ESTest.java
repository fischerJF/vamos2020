/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 10:43:24 BRT 2019
 */

package jogador;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import piece.Piece;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(0);
      Piece piece0 = new Piece(0, 0, 0);
      Piece piece1 = new Piece(0, 0, 0);
      player0.addPiece(0, piece0);
      piece0.setLocation(0, (-1));
      player0.removePiece(piece1);
      assertEquals(0, player0.getTeam());
      assertEquals(0, player0.getScore());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(0);
      Piece piece0 = new Piece(1, 0, 0);
      player0.addPiece(piece0);
      Piece piece1 = new Piece(0, 0, 0);
      player0.removePiece(piece1);
      assertEquals(0, player0.getTeam());
      assertEquals(0, player0.getScore());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(1);
      int int0 = player0.getTeam();
      assertEquals(1, int0);
      assertEquals(0, player0.getScore());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-1));
      int int0 = player0.getTeam();
      assertEquals((-1), int0);
      assertEquals(0, player0.getScore());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(0);
      Piece piece0 = new Piece();
      player0.addPiece(piece0);
      player0.getPlayerPieces();
      assertEquals(0, player0.getScore());
      assertEquals(0, player0.getTeam());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(0);
      Piece piece0 = new Piece();
      player0.addPiece(piece0);
      // Undeclared exception!
      try { 
        player0.removePiece(piece0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("piece.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(0);
      Piece piece0 = new Piece(0, 0, 0);
      // Undeclared exception!
      try { 
        player0.addPiece((-1), piece0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(0);
      Piece piece0 = new Piece(0, 0, 0);
      player0.addPiece(0, piece0);
      Piece piece1 = new Piece(0, (-1), 0);
      player0.removePiece(piece1);
      assertEquals(0, player0.getTeam());
      assertEquals(0, player0.getScore());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0);
      Piece piece0 = new Piece((-1), 0, 0);
      Piece piece1 = new Piece(0, 0, 0);
      player0.addPiece(0, piece0);
      player0.removePiece(piece1);
      assertEquals(0, player0.getScore());
      assertEquals(0, player0.getTeam());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setScore();
      int int0 = player0.getScore();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setTeam(0);
      assertEquals(0, player0.getTeam());
      assertEquals(0, player0.getScore());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(0);
      int int0 = player0.getScore();
      assertEquals(0, int0);
      assertEquals(0, player0.getTeam());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(0);
      int int0 = player0.getTeam();
      assertEquals(0, player0.getScore());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(0);
      Piece piece0 = new Piece(0, 0, 0);
      player0.addPiece(0, piece0);
      player0.removePiece(piece0);
      assertEquals(0, player0.getScore());
      assertEquals(0, player0.getTeam());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setPiecesKilled();
      assertEquals(0, player0.getScore());
      assertEquals(0, player0.getTeam());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(0);
      player0.getPlayerPieces();
      assertEquals(0, player0.getScore());
      assertEquals(0, player0.getTeam());
  }
}
